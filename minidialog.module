<?php

/**
 * @file
 * Mini dialog module.
 */

define('MINIDIALOG_VAR_JS_ALL', 'minidialog_js_every_page');

/**
 * Tell if the current incomming query is AJAX or JSONP.
 *
 * @return boolean
 */
function minidialog_is_ajax() {

  $isNotHtml = &drupal_static(__FUNCTION__);

  if (null === $isNotHtml) {

    $current_path = function_exists('current_path') ? current_path() : $_GET['q'];

    if (isset($_SERVER['X-Requested-With']) && 'xmlhttprequest' === strtolower($_SERVER['X-Requested-With'])) {
      // We are AJAX!
      $isNotHtml = true;
    } else if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && 'xmlhttprequest' === strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) {
      // We are AJAX!
      $isNotHtml = true;
    } else if (false !== strpos($current_path, 'ajax') && isset($_GET['callback'])) {
      // We probably are JSONP.
      $isNotHtml = true;
    } else {
      $isNotHtml = false;
    }
  }

  return $isNotHtml;
}

/**
 * Get the chance of intercepting queries dedicated to be displayed
 * in a dialog, without being done for.
 */
function minidialog_page_delivery_callback_alter(&$delivery_callback) {
  if (minidialog_is_ajax() && isset($_GET['minidialog'])) {
    require_once __DIR__ . '/minidialog.deliver.inc';
    $delivery_callback = 'minidialog_deliver_ajax_dialog';
  }
}

/**
 * Implements hook_page_build().
 */
function minidialog_page_build(&$page) {
  if (variable_get(MINIDIALOG_VAR_JS_ALL, TRUE)) {
    drupal_add_library('minidialog', 'dialog');
  }
}

/**
 * Implements hook_custom_theme().
 */
function minidialog_custom_theme() {
  if (minidialog_is_ajax()) {
    if (isset($_POST['ajax_page_state']['theme'])) {
      // Force previous page theme.
      return $_POST['ajax_page_state']['theme'];
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function minidialog_admin_paths() {
  $ret = array('media/browser' => true);
  // jquery_update uses the path_is_admin() function to determine whether or
  // not we are using an admin theme, sadly some drupal_add_*() are being
  // added via ajax, and 'system/ajax' is not an admin path per default...
  // Compute this dynamically and prey it works.
  if ('system/ajax' === current_path()) {
    if (isset($_POST['ajax_page_state']['theme']) && $_POST['ajax_page_state']['theme'] === variable_get('admin_theme', null)) {
      $ret['system/ajax'] = true;
    }
  }
  return $ret;
}

/**
 * Implements hook_library().
 */
function minidialog_library() {
  return array(
    'dialog' => array(
      'title'   => 'Minidialog',
      'website' => 'http://perdu.com',
      'version' => '0.1',
      'js' => array(
        drupal_get_path('module', 'minidialog') . '/minidialog.js' => array(),
      ),
      'css' => array(
        drupal_get_path('module', 'minidialog') . '/minidialog.css' => array(
          'type'  => 'file',
          'media' => 'screen',
        ),
      ),
      'dependencies' => array(
        array('system', 'drupal.ajax'),
        array('system', 'ui.dialog'),
      ),
    ),
  );
}

/**
 * Open the minidialog dialog.
 *
 * @param string|array $content
 *   drupal_render() friendly structure.
 *
 * @return array
 *   AJAX command.
 */
function minidialog_ajax_command_content($content) {

  if (is_array($content)) {

    // Attempt to append the close button if appliable.
    if (isset($content['#type']) && 'form' === $content['#type']) {
      if (isset($content['actions'])) {
        $content['actions']['minidialog-close'] = array(
          '#type'       => 'button',
          '#value'      => t("Cancel"),
          '#attributes' => array('id' => 'minidialog-close'),
        );

        // Fixes some forms in order to avoid double cancel buttons.
        unset($content['actions']['cancel']);

      } else {
        $content['minidialog-close'] = array(
          '#type'       => 'button',
          '#value'      => t("Cancel"),
          '#attributes' => array('id' => 'minidialog-close'),
        );
      }
    }

    $content = drupal_render($content);

  } else {
    $content = (string)$content;
  }

  return ajax_command_html('#minidialog .content', $content);
}

/**
 * Open the minidialog dialog.
 *
 * @param array $options
 *   Options for jQuery UI's jQuery.dialog() function.
 *
 * @return array
 *   AJAX command.
 */
function minidialog_ajax_command_open(array $options = null) {
  if (empty($options['title'])) {
    $options['title'] = drupal_get_title();
  }
  if (empty($options['width'])) {
    if (isset($options['wide']) && $options['wide']) {
      $options['width'] = variable_get('minidialog_width_wide', '960px');
    } else {
      $options['width'] = variable_get('minidialog_width_default', '600px');
    }
  }
  return array(
    'command'   => 'invoke',
    'selector'  => null,
    'method'    => 'MiniDialogOpen',
    'arguments' => array($options),
  );
}

/**
 * Close the minidialog dialog.
 *
 * @param boolean|string $redirect
 *   If set to false, just close the dialog.
 *   If set to true, close the dialog and reload the same page.
 *   If set to a string, use this as a path for redirection.
 *   If an array, use it as call args for url() method.
 *
 * @return array
 *   AJAX command.
 */
function minidialog_ajax_command_close($redirect = false) {

  if (is_array($redirect)) {
    $redirect = call_user_func_array('url', $redirect);
  } else if (is_string($redirect)) {
    $redirect = url($redirect);
  } else {
    $redirect = (bool)$redirect;
  }

  return array(
    'command'   => 'invoke',
    'selector'  => null,
    'method'    => 'MiniDialogClose',
    'arguments' => array($redirect),
  );
}
